//
//  SETOAesSivCipherUtilTests.m
//  SETOCryptomatorCryptor
//
//  Created by Sebastian Stenzel on 14.02.15.
//  Copyright Â© 2015-2017 Skymatic. All rights reserved.
//

#import <XCTest/XCTest.h>
#import "SETOAesSivCipherUtil.h"

@interface SETOAesSivCipherUtilTests : XCTestCase
@end

/**
 * Tests from https://tools.ietf.org/html/rfc5297#appendix-A.1
 */
@implementation SETOAesSivCipherUtilTests

- (void)testSivEncrypt {
	const unsigned char macKey[16] = {0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, //
	                                  0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0};

	const unsigned char aesKey[16] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, //
	                                  0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};

	const unsigned char ad1[24] = {0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, //
	                               0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, //
	                               0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27};
	const unsigned char *ads[1] = {ad1};
	const size_t ad_sizes[1] = {24};

	const unsigned char plaintext[14] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, //
	                                     0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee};

	unsigned char out[30];
	int result = siv_enc(aesKey, macKey, 16, plaintext, 14, 1, ads, ad_sizes, out);
	XCTAssert(result == 0);
	NSData *outData = [NSData dataWithBytes:out length:30];

	const unsigned char expected[30] = {0x85, 0x63, 0x2d, 0x07, 0xc6, 0xe8, 0xf3, 0x7f, //
	                                    0x95, 0x0a, 0xcd, 0x32, 0x0a, 0x2e, 0xcc, 0x93, //
	                                    0x40, 0xc0, 0x2b, 0x96, 0x90, 0xc4, 0xdc, 0x04, //
	                                    0xda, 0xef, 0x7f, 0x6a, 0xfe, 0x5c};
	NSData *expectedData = [NSData dataWithBytes:expected length:30];
	XCTAssertEqualObjects(expectedData, outData);
}

- (void)testSivDecrypt {
	const unsigned char macKey[16] = {0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, //
	                                  0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0};

	const unsigned char aesKey[16] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, //
	                                  0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};

	const unsigned char ad1[24] = {0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, //
	                               0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, //
	                               0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27};
	const unsigned char *ads[1] = {ad1};
	const size_t ad_sizes[1] = {24};

	const unsigned char ciphertext[30] = {0x85, 0x63, 0x2d, 0x07, 0xc6, 0xe8, 0xf3, 0x7f, //
	                                      0x95, 0x0a, 0xcd, 0x32, 0x0a, 0x2e, 0xcc, 0x93, //
	                                      0x40, 0xc0, 0x2b, 0x96, 0x90, 0xc4, 0xdc, 0x04, //
	                                      0xda, 0xef, 0x7f, 0x6a, 0xfe, 0x5c};

	unsigned char out[14];
	int result = siv_dec(aesKey, macKey, 16, ciphertext, 30, 1, ads, ad_sizes, out);
	XCTAssert(result == 0);
	NSData *outData = [NSData dataWithBytes:out length:14];

	const unsigned char expected[14] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, //
	                                    0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee};
	NSData *expectedData = [NSData dataWithBytes:expected length:14];
	XCTAssertEqualObjects(expectedData, outData);
}

- (void)testSivDecryptWithInvalidKey {
	const unsigned char macKey[16] = {0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, //
	                                  0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0};

	const unsigned char aesKey[16] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, //
	                                  0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0x00};

	const unsigned char ad1[24] = {0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, //
	                               0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, //
	                               0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27};
	const unsigned char *ads[1] = {ad1};
	const size_t ad_sizes[1] = {24};

	const unsigned char ciphertext[30] = {0x85, 0x63, 0x2d, 0x07, 0xc6, 0xe8, 0xf3, 0x7f, //
	                                      0x95, 0x0a, 0xcd, 0x32, 0x0a, 0x2e, 0xcc, 0x93, //
	                                      0x40, 0xc0, 0x2b, 0x96, 0x90, 0xc4, 0xdc, 0x04, //
	                                      0xda, 0xef, 0x7f, 0x6a, 0xfe, 0x5c};

	unsigned char out[14];
	int result = siv_dec(aesKey, macKey, 16, ciphertext, 30, 1, ads, ad_sizes, out);
	XCTAssert(result != 0);
}

- (void)testS2V {
	const unsigned char macKey[16] = {0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, //
	                                  0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0};

	const unsigned char ad1[24] = {0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, //
	                               0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, //
	                               0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27};
	const unsigned char *ads[1] = {ad1};
	const size_t ad_sizes[1] = {24};

	const unsigned char plaintext[14] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, //
	                                     0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee};

	unsigned char out[16];
	int result = s2v(macKey, 16, plaintext, 14, 1, ads, ad_sizes, out);
	XCTAssert(result == 0);
	NSData *outData = [NSData dataWithBytes:out length:16];

	const unsigned char expected[16] = {0x85, 0x63, 0x2d, 0x07, 0xc6, 0xe8, 0xf3, 0x7f, //
	                                    0x95, 0x0a, 0xcd, 0x32, 0x0a, 0x2e, 0xcc, 0x93};
	NSData *expectedData = [NSData dataWithBytes:expected length:16];
	XCTAssertEqualObjects(expectedData, outData);
}

- (void)testNonceBasedAuthenticatedEncryption {
	const unsigned char macKey[16] = {0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, //
	                                  0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70};

	const unsigned char aesKey[16] = {0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, //
	                                  0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f};

	const unsigned char ad1[40] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, //
	                               0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, //
	                               0xde, 0xad, 0xda, 0xda, 0xde, 0xad, 0xda, 0xda, //
	                               0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, //
	                               0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00};

	const unsigned char ad2[10] = {0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, //
	                               0x90, 0xa0};

	const unsigned char nonce[16] = {0x09, 0xf9, 0x11, 0x02, 0x9d, 0x74, 0xe3, 0x5b, //
	                                 0xd8, 0x41, 0x56, 0xc5, 0x63, 0x56, 0x88, 0xc0};

	const unsigned char *ads[3] = {ad1, ad2, nonce};
	const size_t ad_sizes[3] = {40, 10, 16};

	const unsigned char plaintext[47] = {0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, //
	                                     0x73, 0x6f, 0x6d, 0x65, 0x20, 0x70, 0x6c, 0x61, //
	                                     0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x74, //
	                                     0x6f, 0x20, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, //
	                                     0x74, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, //
	                                     0x53, 0x49, 0x56, 0x2d, 0x41, 0x45, 0x53};

	unsigned char out[63];
	int result = siv_enc(aesKey, macKey, 16, plaintext, 47, 3, ads, ad_sizes, out);
	XCTAssert(result == 0);
	NSData *outData = [NSData dataWithBytes:out length:63];

	const unsigned char expected[63] = {0x7b, 0xdb, 0x6e, 0x3b, 0x43, 0x26, 0x67, 0xeb, //
	                                    0x06, 0xf4, 0xd1, 0x4b, 0xff, 0x2f, 0xbd, 0x0f, //
	                                    0xcb, 0x90, 0x0f, 0x2f, 0xdd, 0xbe, 0x40, 0x43, //
	                                    0x26, 0x60, 0x19, 0x65, 0xc8, 0x89, 0xbf, 0x17, //
	                                    0xdb, 0xa7, 0x7c, 0xeb, 0x09, 0x4f, 0xa6, 0x63, //
	                                    0xb7, 0xa3, 0xf7, 0x48, 0xba, 0x8a, 0xf8, 0x29, //
	                                    0xea, 0x64, 0xad, 0x54, 0x4a, 0x27, 0x2e, 0x9c, //
	                                    0x48, 0x5b, 0x62, 0xa3, 0xfd, 0x5c, 0x0d};

	NSData *expectedData = [NSData dataWithBytes:expected length:63];
	XCTAssertEqualObjects(expectedData, outData);
}

@end
